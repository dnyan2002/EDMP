# Generated by Django 4.2.6 on 2025-03-25 05:54

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_name', models.CharField(max_length=255)),
                ('ip_address', models.GenericIPAddressField()),
                ('port_no', models.IntegerField()),
                ('status', models.CharField(max_length=50)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Connection',
                'verbose_name_plural': 'Connections',
                'db_table': 'connection',
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('equipment_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Equipment',
                'verbose_name_plural': 'Equipments',
                'db_table': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='Parameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Parameter',
                'verbose_name_plural': 'Parameters',
                'db_table': 'parameter',
            },
        ),
        migrations.CreateModel(
            name='PIDData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('crusher1_napier_tph', models.FloatField()),
                ('crusher2_napier_tph', models.FloatField()),
                ('feed_pump1_value', models.FloatField()),
                ('feed_pump2_value', models.FloatField()),
                ('water_pump1_value', models.FloatField()),
                ('water_pump2_value', models.FloatField()),
                ('fresh_water_pump1', models.FloatField()),
                ('fresh_water_pump2', models.FloatField()),
                ('mixer1_value', models.FloatField()),
                ('mixer2_value', models.FloatField()),
                ('level_switch1', models.FloatField()),
                ('level_switch2', models.FloatField()),
                ('water_flow_meter1', models.FloatField()),
                ('water_flow_meter2', models.FloatField()),
                ('fire_fighting_pump1', models.FloatField()),
                ('fire_fighting_pump2', models.FloatField()),
                ('pt_digester_feed_pump1_value', models.FloatField()),
                ('pt_digester_feed_pump2_value', models.FloatField()),
                ('pt_digester_feed_pump3_value', models.FloatField()),
                ('pt_circulation_pump_value', models.FloatField()),
                ('pt_sealing_pump1_value', models.FloatField()),
                ('pt_sealing_pump2_value', models.FloatField()),
                ('pt_level_switch1', models.FloatField()),
                ('pt_level_switch2', models.FloatField()),
                ('pt_slurry_flowmeter1', models.FloatField()),
                ('pt_slurry_flowmeter2', models.FloatField()),
                ('dt1_circulation_pump1', models.FloatField()),
                ('dt1_circulation_pump2', models.FloatField()),
                ('dt1_circulation_pump3', models.FloatField()),
                ('dt1_pt100_1', models.FloatField()),
                ('dt1_pt100_2', models.FloatField()),
                ('dt1_pr_tx_1', models.FloatField()),
                ('dt1_pr_tx_2', models.FloatField()),
                ('heat_pump1_value', models.FloatField()),
                ('heat_pump2_value', models.FloatField()),
                ('heat_pump3_value', models.FloatField()),
                ('hot_water_pump1', models.FloatField()),
                ('hot_water_pump2', models.FloatField()),
                ('sealing_pump1', models.FloatField()),
                ('sealing_pump2', models.FloatField()),
                ('baloon_plc1', models.FloatField()),
                ('baloon_plc2', models.FloatField()),
                ('baloon_plc3', models.FloatField()),
                ('sls_feed_pump1', models.FloatField()),
                ('sls_feed_pump2', models.FloatField()),
                ('sls_circulation_pump', models.FloatField()),
                ('sls_level_switch1', models.FloatField()),
                ('sls_level_switch2', models.FloatField()),
                ('sls_slurry_flowmeter', models.FloatField()),
                ('gas_flowmeter1', models.FloatField()),
                ('gas_flowmeter2', models.FloatField()),
            ],
            options={
                'verbose_name': 'pid_data',
                'verbose_name_plural': 'pid_data',
                'db_table': 'pid_data',
            },
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('plant_id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('plant_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Plant',
                'verbose_name_plural': 'plants',
                'db_table': 'plant',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'db_table': 'section',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=30, unique=True, verbose_name='Role')),
                ('permissions', models.ManyToManyField(blank=True, related_name='role_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='LocalData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value1', models.FloatField()),
                ('value2', models.FloatField()),
                ('value3', models.FloatField()),
                ('value4', models.FloatField()),
                ('value5', models.FloatField()),
                ('value6', models.FloatField()),
                ('value7', models.FloatField()),
                ('value8', models.FloatField()),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='irms_app.connection')),
                ('plant_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='irms_app.plant')),
            ],
            options={
                'verbose_name': 'Local Data',
                'verbose_name_plural': 'Local Data',
                'db_table': 'local_data',
            },
        ),
        migrations.CreateModel(
            name='FieldLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=255)),
                ('field_description', models.TextField()),
                ('ip_address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='irms_app.connection')),
                ('plant_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='irms_app.plant')),
            ],
            options={
                'verbose_name': 'Field Link',
                'verbose_name_plural': 'Field Links',
                'db_table': 'field_link',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(max_length=50, verbose_name='Full Name')),
                ('company_name', models.CharField(max_length=70, verbose_name='Company Name')),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Inactive', 'Inactive')], max_length=10)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', to='auth.group')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='irms_app.role', verbose_name='Role')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='connection',
            name='plant_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='irms_app.plant'),
        ),
    ]
